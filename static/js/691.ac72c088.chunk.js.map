{"version":3,"file":"static/js/691.ac72c088.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/FilterContacts/FilterContacts.styled.jsx","components/FilterContacts/FilterContacts.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n","import styled from '@emotion/styled';\n\nexport const SectionWrap = styled.section`\n  padding-left: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionWrap } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionWrap>\n      <h1>{title}</h1>\n      {children}\n    </SectionWrap>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  width: 300px;\n  list-style: none;\n  border: 1px solid #000000;\n  border-radius: 5px;\n`;\nexport const FormTitle = styled.label`\n  display: block;\n  margin-left: 10px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 180px;\n  margin-left: 10px;\n  margin-bottom: 10px;\n\n  :hover :focus {\n    outline: blue;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  display: block;\n  margin-left: 10px;\n  margin-bottom: 10px;\n  background-color: #f48b8b;\n  border: 1px solid #111111;\n  cursor: pointer;\n  border-radius: 5px;\n\n  :hover {\n    color: #f6f2f2;\n    background-color: #f40101;\n    border-color: #f6f2f2;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContactsThunk } from 'redux/contacts/operations';\nimport { Form, FormTitle, Input, FormBtn } from './ContactForm.styled';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    if (e.currentTarget.name === 'name') {\n      setName(e.currentTarget.value);\n    }\n\n    if (e.currentTarget.name === 'number') {\n      setNumber(e.currentTarget.value);\n    }\n  };\n\n  function isSameContact(name, number) {\n    return (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      ) || contacts.find(contact => contact.number === number)\n    );\n  }\n\n  const newContact = (name, number) => {\n    const contact = {\n      name,\n      number,\n    };\n    isSameContact(name, number)\n      ? alert('This contact is already exists')\n      : dispatch(addContactsThunk(contact));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    newContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormTitle htmlFor=\"name\">Name</FormTitle>\n      <Input\n        onChange={handleInputChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <FormTitle htmlFor=\"number\">Number</FormTitle>\n      <Input\n        onChange={handleInputChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <FormBtn type={'submit'}>Add contact</FormBtn>\n    </Form>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Title = styled.label`\n  display: block;\n  width: 220px;\n  margin-top: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 180px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n\n  :hover :focus {\n    outline: blue;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/slice';\nimport { Title, Input } from './FilterContacts.styled';\n\nexport const FilterContacts = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFiltered = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n  return (\n    <Title>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFiltered}\n      />\n    </Title>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ListTitle = styled.h1`\n  margin-left: 100px;\n`;\n\nexport const Loading = styled.div`\n  margin-left: 100px;\n`;\n\nexport const CardList = styled.ul`\n  width: 350px;\n  margin-left: 100px;\n  padding: 0;\n`;\n\nexport const Card = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nexport const DeleteBtn = styled.button`\n  width: 50px;\n  height: 20px;\n  display: block;\n  padding: 0;\n  background-color: #f48b8b;\n  border: 1px solid #111111;\n  cursor: pointer;\n  border-radius: 5px;\n\n  :hover {\n    color: #f6f2f2;\n    background-color: #f40101;\n    border-color: #f6f2f2;\n  }\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport {\n  getContactsThunk,\n  deleteContactsThunk,\n} from 'redux/contacts/operations';\nimport {\n  ListTitle,\n  Loading,\n  CardList,\n  Card,\n  DeleteBtn,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filterTerm = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  function filteredContactsList() {\n    const filter = filterTerm.toLowerCase().trim();\n    return Array.isArray(contacts)\n      ? contacts.filter(contact => contact.name.toLowerCase().includes(filter))\n      : [];\n  }\n\n  const filteredContacts = filteredContactsList();\n\n  return (\n    <div>\n      <ListTitle>Contacts list</ListTitle>\n      {isLoading && !error && <Loading>Request in progress...</Loading>}\n      {!isLoading && (\n        <CardList>\n          {filteredContacts.reverse().map(({ name, number, id }) => (\n            <Card key={id}>\n              <p>\n                {name}: {number}\n              </p>\n              <DeleteBtn\n                type=\"button\"\n                onClick={() => {\n                  dispatch(deleteContactsThunk(id));\n                }}\n              >\n                Delete\n              </DeleteBtn>\n            </Card>\n          ))}\n        </CardList>\n      )}\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Section } from 'components/Section/Section';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { FilterContacts } from 'components/FilterContacts/FilterContacts';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nexport default function Contacts() {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n        <Section title=\"Search contacts\">\n          <FilterContacts />\n        </Section>\n      </Section>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","SectionWrap","styled","Section","title","children","Form","FormTitle","Input","FormBtn","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInputChange","e","currentTarget","value","newContact","contact","find","toLowerCase","isSameContact","addContactsThunk","alert","onSubmit","preventDefault","htmlFor","onChange","type","pattern","required","Title","FilterContacts","filterContacts","target","ListTitle","Loading","CardList","Card","DeleteBtn","ContactList","filterTerm","useEffect","getContactsThunk","filteredContacts","trim","Array","isArray","includes","filteredContactsList","reverse","map","id","onClick","deleteContactsThunk","Contacts","style","display","justifyContent"],"sourceRoot":""}